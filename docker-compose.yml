version: '3.8'
services:
  database:
    image: postgres:alpine
    container_name: database
    environment:
      POSTGRES_USER: ${DATABASE_USERNAME}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_DB: ${DATABASE_NAME}
    networks:
      - backend
    volumes:
      - database-data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: redis
    networks:
      - backend
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: ./apps/api/Dockerfile
    container_name: api
    depends_on:
      - database
    networks:
      - backend
      - proxy
    environment:
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
      DISCORD_API_CLIENT_ID: ${DISCORD_API_CLIENT_ID}
      DISCORD_API_CLIENT_SECRET: ${DISCORD_API_CLIENT_SECRET}
      FT_API_CLIENT_ID: ${FT_API_CLIENT_ID}
      FT_API_CLIENT_SECRET: ${FT_API_CLIENT_SECRET}
      SESSION_PASSWORD: ${SESSION_PASSWORD}
      DATABASE_URL: ${DATABASE_URL}
    restart: unless-stopped

  web:
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
    container_name: web
    depends_on:
      - api
    networks:
      - proxy
    environment:
      FRONTEND_BASE_URL: ${FRONTEND_BASE_URL}
      DISCORD_API_CLIENT_ID: ${DISCORD_API_CLIENT_ID}
      FT_API_CLIENT_ID: ${FT_API_CLIENT_ID}
      SESSION_PASSWORD: ${SESSION_PASSWORD}
    restart: unless-stopped

  proxy:
    image: nginx:stable-alpine
    container_name: proxy
    depends_on:
      - web
    ports:
      - 8080:80
    volumes:
      - ./templates:/etc/nginx/templates
    networks:
      - proxy
    restart: unless-stopped

networks:
  backend:
  proxy:

volumes:
  database-data:
